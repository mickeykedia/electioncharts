(function(){
  'use strict';

  electionChartsApp.controller('StateCtrl', ['$scope', '$routeParams', 'stateResource', function ($scope, $routeParams, stateResource) {
    var stateId = $routeParams.stateId;
    var state = stateResource.get(stateId);
    var results = stateResource.query(stateId, 'result');

    var chart = {};
    chart.type = "ColumnChart";
    chart.displayed = false;
    chart.data = {"cols": [
      {id: "party", label: "Party", type: "string"},
      {id: "wins", label: "Wins", type: "number"},
      {id: "leads", label: "Leads", type: "number"}
    ]};
    chart.data.rows = [];

    results.$promise.then(function(results) {
      angular.forEach(results, function(result, index){
        if(result.wins > 0 || result.leads > 0) {
          chart.data.rows.push({c: [
            {v: result.party_name},
            {v: result.wins},
            {v: result.leads}]
          });
        }
      });
    });


    chart.options = {
      "title": "Wins and Leads",
      //"isStacked": "true",
      "isStacked": "false",
      "fill": 20,
      "displayExactValues": true,
      "vAxis": {
          "title": "Wins / Leads", "gridlines": {"count": 5}
      },
      "hAxis": {
          "title": "Party"
      }
    };

    chart.formatters = {};
    //chart.cssStyle = "height:600px; width:100%;";
    chart.cssStyle = "";

    $scope.chart = chart;

    $scope.state = state;
    $scope.results = results;
    
    $scope.chartReady = function () {
        fixGoogleChartsBarsBootstrap();
    }

    function fixGoogleChartsBarsBootstrap() {
        // Google charts uses <img height="12px">, which is incompatible with Twitter
        // * bootstrap in responsive mode, which inserts a css rule for: img { height: auto; }.
        // *
        // * The fix is to use inline style width attributes, ie <img style="height: 12px;">.
        // * BUT we can't change the way Google Charts renders its bars. Nor can we change
        // * the Twitter bootstrap CSS and remain future proof.
        // *
        // * Instead, this function can be called after a Google charts render to "fix" the
        // * issue by setting the style attributes dynamically.

        $(".google-visualization-table-table img[width]").each(function (index, img) {
            $(img).css("width", $(img).attr("width")).css("height", $(img).attr("height"));
        });
    };

  }]);
}());
