"""`main` is the top level module for your Flask application."""

# Import the Flask Framework
from flask import Flask
from flask import Flask, request, session, g, redirect, url_for, abort, \
    render_template, flash, make_response
import os
import cgi
import jinja2
import MySQLdb
import json
import sys
import datetime
import candidate
import constituency
import party
from google.appengine.api import memcache
from random import random

# Configure the Jinja2 environment.
JINJA_ENVIRONMENT = jinja2.Environment(
    loader=jinja2.FileSystemLoader(os.path.dirname(__file__)),
    autoescape=True,
    extensions=['jinja2.ext.autoescape'])

# Define your production Cloud SQL instance information.
_INSTANCE_NAME = 'indiaelectiontracker:ls14'

app = Flask(__name__)
# Note: We don't need to call run() since our application is embedded within
# the App Engine WSGI application server.

def get_data_multiple_params(fnname, param1,param2):
	key = fnname + ":" + param1+":"+param2
	data = memcache.get(key)
	if data is not None:
		return data
	else:
		data = getattr(sys.modules[__name__], fnname)(param1,param2)
		memcache.add(key, data, 10)
		return data

def get_data_multiple_params_ex(module_name,fnname, param1,param2):
	key = module_name+":"+fnname + ":" + param1+":"+param2
	data = memcache.get(key)
	if data is not None:
		return data
	else:
		data = getattr(sys.modules[module_name], fnname)(get_db(),param1,param2)
		memcache.add(key, data, 10)
		return data

def get_data(fnname, param):
    key = fnname + ":" + param
    data = memcache.get(key)
    if data is not None:
        return data
    else:
        data = getattr(sys.modules[__name__], fnname)(param)
        memcache.add(key, data, 10)
        return data

""" This is a slightly modified version of get_data, which also takes the module name, and 
passes the db object to the data model function"""
def get_data_ex(module_name,fnname, param):
    key = module_name+":"+fnname + ":" + param
    data = memcache.get(key)
    if data is not None:
        return data
    else:
        data = getattr(sys.modules[module_name], fnname)(get_db(),param)
        memcache.add(key, data, 10)
        return data

@app.route('/')
@app.route('/party')
@app.route('/party/<id>')
@app.route('/coalition/<id>')
@app.route('/party/state/<id>/<id2>')
@app.route('/constituency')
@app.route('/constituency/<id>')
@app.route('/state')
@app.route('/state/<id>')
@app.route('/candidate')
@app.route('/candidate/<id>')
def default_route(id=None,id2=None):
    return make_response(open('templates/index.html').read())


@app.route('/api/party')
def api_party_list():
	output = get_data_ex('party','get_party_list', '')
	return output;

@app.route('/api/party/<party_id>')
def api_party(party_id):
	output = get_data_ex('party','get_party', party_id)
	return output;

@app.route('/api/coalition/<coalition_id>')
def api_coalition(coalition_id):
	output = get_data_ex('party','get_coalition', coalition_id)
	return output;

@app.route('/api/party/detailed_result/<party_id>')
def api_party_detailed_result(party_id):
	output = get_data_ex('party','get_party_detailed_result', party_id)
	return output;

@app.route('/api/coalition/detailed_result/<coalition_id>')
def api_coalition_detailed_result(coalition_id):
	output = get_data_ex('party','get_coalition_detailed_result', coalition_id)
	return output;

@app.route('/api/party/state/detailed_result/<party_id>/<state_id>')
def api_party_state_detailed_result(party_id,state_id):
	output = get_data_multiple_params_ex('party','get_party_state_detailed_result', party_id,state_id)
	return output;

@app.route('/api/party/statewise_result/<party_id>')
def api_party_statewise_result(party_id):
	return get_data_ex('party','get_party_statewise_result',party_id)

@app.route('/api/coalition/statewise_result/<coalition_id>')
def api_coalition_statewise_result(coalition_id):
	return get_data_ex('party','get_coalition_statewise_result',coalition_id)

@app.route('/api/party/result/<party_id>')
def api_party_result(party_id):
	return get_data_ex('party','get_party_result',party_id)

@app.route('/api/coalition/result/<coalition_id>')
def api_coalition_result(coalition_id):
	return get_data_ex('party','get_coalition_result',coalition_id)

@app.route('/api/coalition/parties/<coalition_id>')
def api_coalition_parties(coalition_id):
	return get_data_ex('party','get_coalition_parties',coalition_id)

@app.route('/api/party/state/result/<party_id>/<state_id>')
def api_party_state_result(party_id,state_id):
	return get_data_multiple_params_ex('party','get_party_result_by_state',party_id,state_id)

@app.route('/api/party/vote_percentage/<party_id>')
def api_party_vote_percentage(party_id):
	return get_data_ex('party','get_party_vote_percentage',party_id)


@app.route('/api/party/vote_percentage/<party_id>/<state_id>')
def api_party_vote_percentage_state(party_id,state_id):
	return get_data_multiple_params_ex('party','get_vote_percentage_for_party_state',party_id,state_id)
#@app.route('/api/party/result_summary/<partyId>')
#def get_party_result_summary(partyId):

@app.route('/api/state')
def api_state_list():
    output = get_data('get_state_list', '')
    return output;


def get_state_list(param):
    db = get_db()
    cursor = db.cursor()
    cursor.execute('SELECT id, name, shortform, state_code FROM state')
    statelist = []
    for row in cursor.fetchall():
        statelist.append(dict([('id', row[0]),
                               ('name', cgi.escape(row[1])),
                               ('shortform', cgi.escape(row[2])),
                               ('state_code', cgi.escape(row[3]))]))
    return json.dumps(statelist)

@app.route('/api/state/<state_id>')
def api_state(state_id):
    output = get_data('get_state', state_id)
    return output;

def get_state(state_id):
    db = get_db()
    cursor = db.cursor()
    cursor.execute('SELECT id, name, shortform, state_code FROM state where id = ' + state_id + ';')
    row = cursor.fetchone();
    state = dict([('id', row[0]),
                  ('name', cgi.escape(row[1])),
                  ('shortform', cgi.escape(row[2])),
                  ('state_code', cgi.escape(row[3]))])
    return json.dumps(state)


@app.route('/api/state/constituency_list/<state_id>')
def api_constituency_list_for_state(state_id):
    output = get_data('get_constituency_list_for_state', state_id)
    return output;


def get_constituency_list_for_state(state_id):
    db = get_db()
    cursor = db.cursor()
    cursor.execute('Select c.id, c.name, c.constituency_code, c.state_id, s.name from constituency c inner join state s on s.id = c.state_id where s.id = ' + state_id + ';')
    cList = []
    for row in cursor.fetchall():
        cList.append({"id": row[0], "name": cgi.escape(row[1]), "constituency_code": cgi.escape(row[2]), "state_id": row[3], "state_name": cgi.escape(row[4])})
    return json.dumps(cList)


@app.route('/api/state/result/<state_id>')
def api_state_result(state_id):
    output = get_data('get_state_result', state_id)
    return output;


def get_state_result(state_id):
    db = get_db()
    cursor = db.cursor()
    cursor.execute("""
      select
        rs5.party_id,
        max(case when rs5.status = "COUNTING" then leads_wins else 0 end) leads,
        max(case when rs5.status = "DECLARED" then leads_wins else 0 end) wins
      from (
        select 
          rs4.party_id,
          rs4.status,
          count(*) as leads_wins
        from (
          select
            rs3.*,
            if (@prev_constituency_id = rs3.constituency_id, 0, 1) as is_first_appear,
            @prev_constituency_id := rs3.constituency_id
          from (
            select
              rs1.constituency_id,
              rs1.party_id,
              rs1.status
            from
              results rs1
            inner join (
              select
                constituency_id,
                max(votes) as max_votes
              from
                results
              where
                constituency_id in (select id from constituency where state_id = %s)
              and
                active=1
              group by
                constituency_id
              ) rs2
            on
              rs1.constituency_id=rs2.constituency_id
            and
              rs1.votes=rs2.max_votes
            order by
              rs1.constituency_id
          ) rs3, (
          select @prev_constituency_id := 0, @seq := 0
          ) init
        ) rs4
        where
          is_first_appear = 1
        group by 
          rs4.party_id,
          rs4.status
      ) rs5
      group by
        rs5.party_id;""", (state_id))

    party_wins_leads = {}
    for row in cursor.fetchall():
        party_wins_leads[str(row[0])]={"leads": str(row[1]), "wins": str(row[2])}

    cursor.execute(
        """select p.id, p.name, p.symbol, p.shortform, sum(rs.votes) as votes from results rs inner join party p on rs.party_id = p.id where rs.constituency_id in (select id from constituency where state_id = %s) and rs.active = 1 group by rs.party_id order by votes desc;""", (state_id))

    results = []
    for row in cursor.fetchall():
        party_id = str(row[0])
        result = {"party_id": party_id, "party_name": row[1], "party_symbol": row[2],
                  "party_shortform": row[3], "votes": str(row[4])}
        if party_id in party_wins_leads:
            result["wins"] = party_wins_leads[party_id]["wins"]
            result["leads"] = party_wins_leads[party_id]["leads"]
        else:
            result["wins"] = str(0)
            result["leads"] = str(0)
        results.append(result)
    return json.dumps(results)



@app.route('/api/constituency')
def api_constituency_list():
    output = get_data_ex('constituency','get_constituency_list', '')
    return output;

@app.route('/api/constituency/<constituency_id>')
def api_constituency(constituency_id):
    output = get_data_ex('constituency','get_constituency_info', constituency_id)
    return output;

@app.route('/api/constituency/result/<constituency_id>')
def api_constituency_result(constituency_id):
    output = get_data_ex('constituency','get_constituency_result', constituency_id)
    return output;

@app.route('/api/candidate')
def api_candidate_list():
    output = get_data_ex('candidate','get_candidate_list', "ALL")
    return output;


@app.route('/api/candidate/<candidate_id>')
def api_candidate(candidate_id):
    output = get_data_ex('candidate','get_candidate_info', candidate_id)
    return output;

@app.route('/api/candidate/result/<candidate_id>')
def api_candidate_result(candidate_id):
    output = get_data_ex('candidate','get_candidate_result', candidate_id)
    return output;


@app.errorhandler(404)
def page_not_found(e):
    """Return a custom 404 error."""
    return 'Sorry, Nothing at this URL.', 404


@app.errorhandler(500)
def page_not_found(e):
    """Return a custom 500 error."""
    return 'Sorry, unexpected error: {}'.format(e), 500


#@app.route('/fillRandomResults')
def fill_random_results():
    db = get_db()
    cursor = db.cursor()
    cursor.execute('SELECT * from last_time_results')

    results = []
    importDate = datetime.date(2014, 4, 15)
    for row in cursor.fetchall():
        number = random()
        status = "DECLARED"
        if number > 0.5:
            status = "COUNTING"
        else:
            pass
        results.append({"candidate_id": row[0], "constituency_id": row[1], "votes": row[2], "party_id": row[3],
                        "time_start": str(importDate), "status": status})

    for res in results:
        cursor.execute('''Insert into results (constituency_id,candidate_id,party_id,votes,active,time_start,status) values
                (%s,%s,%s,%s,true,%s,"%s")''', (
            res['constituency_id'], res['candidate_id'], res['party_id'], res['votes'], res['time_start'], res['status']))

    db.commit()
    return json.dumps(results)

def connect_db():
    """Connects to the specific database."""
    if (os.getenv('SERVER_SOFTWARE') and
            os.getenv('SERVER_SOFTWARE').startswith('Google App Engine/')):
        db = MySQLdb.connect(unix_socket='/cloudsql/' + _INSTANCE_NAME, db='resultdayanalysis', user='ls14',
                             passwd='kejriwal')
    else:
        db = MySQLdb.connect(host='127.0.0.1', port=3306, user='root', passwd='', db='resultdayanalysis')
        # Alternately, connect to a Google Cloud SQL instance using:
        # db = MySQLdb.connect(host='ip-address-of-google-cloud-sql-instance', port=3306, user='root')
    return db


def get_db():
    """Opens a new database connection if there is none yet for the
    current application context.
    """
    if not hasattr(g, 'mysql_db'):
        g.mysql_db = connect_db()
    return g.mysql_db


@app.teardown_appcontext
def close_db(error):
    """Closes the database again at the end of the request."""
    if hasattr(g, 'mysql_db'):
        g.mysql_db.close()




#if __name__ == '__main__':
#	app.run(debug=True)
