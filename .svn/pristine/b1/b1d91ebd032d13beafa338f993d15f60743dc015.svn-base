"""`main` is the top level module for your Flask application."""

# Import the Flask Framework
from flask import Flask
from flask import Flask, request, session, g, redirect, url_for, abort, \
    render_template, flash, make_response
import os
import cgi
import jinja2
import MySQLdb
import json
import sys
import datetime
from google.appengine.api import memcache
from random import random

# Configure the Jinja2 environment.
JINJA_ENVIRONMENT = jinja2.Environment(
    loader=jinja2.FileSystemLoader(os.path.dirname(__file__)),
    autoescape=True,
    extensions=['jinja2.ext.autoescape'])

# Define your production Cloud SQL instance information.
_INSTANCE_NAME = 'indiaelectiontracker:ls14'

app = Flask(__name__)
# Note: We don't need to call run() since our application is embedded within
# the App Engine WSGI application server.

def get_data(fnname, param):
    key = fnname + ":" + param
    data = memcache.get(key)
    if data is not None:
        return data
    else:
        data = getattr(sys.modules[__name__], fnname)(param)
        memcache.add(key, data, 10)
        return data

@app.route('/')
@app.route('/party')
@app.route('/party/<id>')
@app.route('/constituency')
@app.route('/constituency/<id>')
@app.route('/state')
@app.route('/state/<id>')
@app.route('/candidate')
@app.route('/candidate/<id>')
def default_route(id=None):
    return make_response(open('templates/index.html').read())

@app.route('/api/party')
def api_party_list():
    output = get_data('get_party_list', '')
    return output;

@app.route('/api/party/<party_id>')
def api_party(party_id):

    output = get_data('get_party', party_id)
    return output;

@app.route('/api/party/detailed_result/<party_id>')
def api_party_detailed_result(party_id):
    output = get_data('get_party_detailed_result', party_id)
    return output;

@app.route('/api/party/statewise_result/<party_id>')
def api_party_statewise_result(party_id):
    return get_data('get_party_statewise_result',party_id)

@app.route('/api/party/result/<party_id>')
def api_party_result(party_id):
    return get_data('get_party_result',party_id)

def get_party_result(party_id):
    db = get_db()
    cursor = db.cursor()
    cursor.execute( """select rs.constituency_id,(votes - MY.max_votes) as lead,p.id as winning_party,rs.status,MY.max_votes as max_votes,ltw.party_id as ltw_party_id
        from results rs
        inner join candidate c on c.id = rs.candidate_id
        inner join constituency cs on cs.id = rs.constituency_id
        inner join latest_results as MY on MY.constituency_id = rs.constituency_id
        inner join party p on p.id = MY.party_id
        inner join candidate wc on wc.id = MY.candidate_id
        inner join last_time_winners ltw on ltw.constituency_id = cs.id
        where rs.active = true and rs.party_id = %s """,(party_id));
    basic_results = json.loads(aggregate_party_result_from_query_result(cursor.fetchall(),party_id))[0]
    vote_share = get_party_vote_percentage(party_id)
    basic_results['vote_percentage'] = vote_share
    return json.dumps(basic_results)



@app.route('/api/party/statewise_result/<party_id>/<state_id>')
def get_party_result_by_state(party_id,state_id):
    db = get_db()
    cursor = db.cursor()
    cursor.execute( """select rs.constituency_id,(votes - MY.max_votes) as lead,p.id as winning_party,rs.status,MY.max_votes as max_votes,ltw.party_id as ltw_party_id
        from results rs
        inner join candidate c on c.id = rs.candidate_id
        inner join constituency cs on cs.id = rs.constituency_id
        inner join latest_results as MY on MY.constituency_id = rs.constituency_id
        inner join party p on p.id = MY.party_id
        inner join candidate wc on wc.id = MY.candidate_id
        inner join last_time_winners ltw on ltw.constituency_id = cs.id
        where rs.active = true and rs.party_id = %s and cs.state_id = %s""",(party_id,state_id));

    return aggregate_party_result_from_query_result(cursor.fetchall(),party_id)

@app.route('/api/party/vote_percentage/<party_id>')
def api_party_vote_percentage(party_id):
    return get_data('get_party_vote_percentage',party_id)



@app.route('/api/party/vote_percentage/<party_id>/<state_id>')
def get_vote_percentage_for_party_state(party_id,state_id):
    db = get_db()
    cursor = db.cursor()
    cursor.execute("""select sum(r.votes),r.party_id from results as r
        inner join constituency c on c.id = r.constituency_id
        where c.state_id = %s group by r.party_id""",(state_id))
    return aggregate_vote_share_for_query_result(cursor.fetchall(),party_id)



def get_party_vote_percentage(party_id):
    db = get_db()
    cursor = db.cursor()
    cursor.execute("""select sum(r.votes),r.party_id from results as r
         group by r.party_id""")
    return aggregate_vote_share_for_query_result(cursor.fetchall(),party_id)

def get_party_statewise_result(party_id):
    """
    Summary of results as
    state,wins,leads,swing,vote_percentage,total
    :param party_id: party id
    """
    statelist = json.loads(get_constituency_count_for_states())
    results = []
    for sl in statelist:
        basic_summary = json.loads(get_party_result_by_state(int(party_id),sl['state_id']))[0]
        vote_percentage = json.loads(get_vote_percentage_for_party_state(party_id,sl['state_id']))
        results.append({"state": sl['state_name'],"state_id":sl['state_id'],"wins":basic_summary['wins'],"leads":basic_summary['leads'],"swing":basic_summary['swing'],"vote_percentage":vote_percentage,"total": sl['pc_count']})
    return json.dumps(results)

def get_party_list(param):
    db = get_db()
    cursor = db.cursor()
    cursor.execute('SELECT id, name, shortform from party')
    partyList = []
    for row in cursor.fetchall():
        partyList.append(dict([('id', row[0]),
                               ('name', cgi.escape(row[1])),
                               ('shortform', cgi.escape(row[2]))]))
    return json.dumps(partyList)

def get_party(party_id):
    db = get_db()
    cursor = db.cursor()
    cursor.execute('SELECT p.id, p.name, p.shortform,p.symbol,c.name as coalition from party p inner join coalition c on c.id = p.coalition_id where p.id = ' + party_id + ';')
    row = cursor.fetchone()
    party = dict([('id', row[0]),
                  ('name', cgi.escape(row[1])),
                  ('symbol', cgi.escape(row[3])),
                  ('coalition', cgi.escape(row[4])),
                  ('shortform', cgi.escape(row[2]))])
    return json.dumps(party)


def get_party_detailed_result(party_id):
    """
    detailed results as
     { constituency_id,constituency_name,candidate_id,candidate_name,lead,competing_party,competing_candidate_id,competing_candidate_name,
     competing_votes,status }
    :param party_id: party id
    """
    db =get_db()
    cursor = db.cursor()
    cursor1 = db.cursor()
    cursor.execute(
        """select rs.constituency_id,cs.name as constituency,rs.candidate_id,c.fullname as candidate_name,(votes - max_votes) as lead,p.name as winning_party,MY.candidate_id,wc.fullname,rs.status,MY.max_votes as max_votes from results rs inner join candidate c on c.id = rs.candidate_id inner join constituency cs on cs.id = rs.constituency_id inner join (SELECT rs1.constituency_id,rs1.candidate_id,rs1.party_id as winning_party_id,rs1.votes as max_votes FROM resultdayanalysis.results rs1 left join results rs2 on rs1.constituency_id = rs2.constituency_id and rs1.votes < rs2.votes where rs2.constituency_id is null ) as MY on MY.constituency_id = rs.constituency_id inner join party p on p.id = MY.winning_party_id inner join candidate wc on wc.id = MY.candidate_id where rs.active = true and rs.party_id = %s;""",
        party_id)

    results = []
    for row in cursor.fetchall():
        if row[4] < 0:
            results.append({"constituency_id": row[0], "constituency_name": row[1], "candidate_id": row[2],
                            "candidate_name": row[3], "lead": row[4], "competing_party": row[5],
                            "competing_candidate_id": row[6], "competing_candidate_name": row[7],
                            "competing_votes": row[9], "status": row[8]})

        else:
            cursor1.execute('SELECT c.id,c.fullname,rs.votes,p.id,p.name from results rs inner join candidate c on c.id = rs.candidate_id inner join party p on p.id = rs.party_id where rs.constituency_id = ' + str(row[0]) + ' and rs.active = true order by rs.votes desc;')
            i = 0
            for r in cursor1.fetchall():
                if i == 1:
                    lead = row[9] - r[2]
                    results.append({"constituency_id": row[0], "constituency_name": row[1], "candidate_id": row[2],
                                    "candidate_name": row[3], "lead": lead, "competing_party": r[4],
                                    "competing_candidate_id": r[0], "competing_candidate_name": r[1],
                                    "competing_votes": row[2], "status": row[8]})
                    break
                else:
                    pass
                i += 1

    return json.dumps(results)

def aggregate_party_result_from_query_result(rows,party_id):

    """

    Takes the results for a region and calculates wincount, leadcount and swing for that region.
    :param rows:
    :param party_id:
    :return:
    """
    wincount =0
    leadcount=0
    swingcount=0

    for row in rows:

        if row[1] ==0 :
            if row[3]=='DECLARED':
                wincount = wincount+1
            else:
                leadcount=leadcount+1

            # if the party is winning/leading now, but hasn't won the last time - then the swing count will get added by one.
            if row[5] != long(party_id) :
                swingcount = swingcount+1
            else :
                pass
        else :
            # if the party isn't leading/winning now - and won the last time, then swing count will reduce by 1
            if row[5] == long(party_id):
                swingcount -= 1
            else:
                pass
    result = []
    result.append({'wins': wincount, 'leads': leadcount, 'swing': swingcount})
    return json.dumps(result)

def aggregate_vote_share_for_query_result(rows,party_id):
    """

        Totals the votes received for the extent of the query and
        gives the voting percentage for a particular party.
    :param rows:
    :param party_id:
    :return:
    """
    totalvotes=0
    party_vote=0
    for row in rows:
        totalvotes = totalvotes+row[0]
        if row[1] == long(party_id):
            party_vote = row[0]
        else:
            pass
    if totalvotes!=0:
        vote_share = (party_vote/totalvotes)*100
        return str(round(vote_share,2))
    else:
        return '0'

#@app.route('/api/party/result_summary/<partyId>')
#def get_party_result_summary(partyId):

@app.route('/api/state')
def api_state_list():
    output = get_data('get_state_list', '')
    return output;


def get_state_list(param):
    db = get_db()
    cursor = db.cursor()
    cursor.execute('SELECT id, name, shortform, state_code FROM state')
    statelist = []
    for row in cursor.fetchall():
        statelist.append(dict([('id', row[0]),
                               ('name', cgi.escape(row[1])),
                               ('shortform', cgi.escape(row[2])),
                               ('state_code', cgi.escape(row[3]))]))
    return json.dumps(statelist)

@app.route('/api/state/<state_id>')
def api_state(state_id):
    output = get_data('get_state', state_id)
    return output;

def get_state(state_id):
    db = get_db()
    cursor = db.cursor()
    cursor.execute('SELECT id, name, shortform, state_code FROM state where id = ' + state_id + ';')
    row = cursor.fetchone();
    state = dict([('id', row[0]),
                  ('name', cgi.escape(row[1])),
                  ('shortform', cgi.escape(row[2])),
                  ('state_code', cgi.escape(row[3]))])
    return json.dumps(state)


@app.route('/api/state/constituency_list/<state_id>')
def api_constituency_list_for_state(state_d):
    output = get_data('get_constituency_list_for_state', state_id)
    return output;


def get_constituency_list_for_state(state_id):
    db = get_db()
    cursor = db.cursor()
    cursor.execute('Select c.id, c.name, c.constituency_code, c.state_id, s.name from constituency c inner join state s on s.id = c.state_id where s.id = ' + state_id + ';')
    cList = []
    for row in cursor.fetchall():
        cList.append({"id": row[0], "name": cgi.escape(row[1]), "constituency_code": cgi.escape(row[2]), "state_id": row[3], "state_name": cgi.escape(row[4])})
    return json.dumps(cList)


@app.route('/api/state/result/<state_id>')
def api_state_result(state_id):
    output = get_data('get_state_result', state_id)
    return output;


def get_state_result(state_id):
    db = get_db()
    cursor = db.cursor()
    cursor.execute("""
      select
        rs5.party_id,
        max(case when rs5.status = "'COUNTING'" then leads_wins else 0 end) leads,
        max(case when rs5.status = "'DECLARED'" then leads_wins else 0 end) wins
      from (
        select 
          rs4.party_id,
          rs4.status,
          count(*) as leads_wins
        from (
          select
            rs3.*,
            if (@prev_constituency_id = rs3.constituency_id, 0, 1) as is_first_appear,
            @prev_constituency_id := rs3.constituency_id
          from (
            select
              rs1.constituency_id,
              rs1.party_id,
              rs1.status
            from
              results rs1
            inner join (
              select
                constituency_id,
                max(votes) as max_votes
              from
                results
              where
                constituency_id in (select id from constituency where state_id = %s)
              and
                active=1
              group by
                constituency_id
              ) rs2
            on
              rs1.constituency_id=rs2.constituency_id
            and
              rs1.votes=rs2.max_votes
            order by
              rs1.constituency_id
          ) rs3, (
          select @prev_constituency_id := 0, @seq := 0
          ) init
        ) rs4
        where
          is_first_appear = 1
        group by 
          rs4.party_id,
          rs4.status
      ) rs5
      group by
        rs5.party_id;""", (state_id))
    party_wins_leads = {}
    for row in cursor.fetchall():
        party_wins_leads[str(row[0])]={"leads": str(row[1]), "wins": str(row[2])}

    print party_wins_leads

    cursor.execute(
        """select p.id, p.name, p.symbol, p.shortform, sum(rs.votes) as votes from results rs inner join party p on rs.party_id = p.id where rs.constituency_id in (select id from constituency where state_id = %s) and rs.active = 1 group by rs.party_id order by votes desc;""", (state_id))

    results = []
    for row in cursor.fetchall():
        party_id = str(row[0])
        result = {"party_id": party_id, "party_name": row[1], "party_symbol": row[2],
                  "party_shortform": row[3], "votes": str(row[4])}
        if party_id in party_wins_leads:
            result["wins"] = party_wins_leads[party_id]["wins"]
            result["leads"] = party_wins_leads[party_id]["leads"]
        else:
            result["wins"] = str(0)
            result["leads"] = str(0)
        results.append(result)
    return json.dumps(results)


@app.route('/api/constituency')
def api_constituency_list():
    output = get_data('get_constituency_list', '')
    return output;


def get_constituency_list(param):
    db = get_db()
    cursor = db.cursor()
    cursor.execute('Select c.id, c.name, c.constituency_code, c.state_id, s.name from constituency c inner join state s on s.id = c.state_id;')
    cList = []
    for row in cursor.fetchall():
        cList.append({"id": row[0], "name": cgi.escape(row[1]), "constituency_code": cgi.escape(row[2]), "state_id": row[3], "state_name": cgi.escape(row[4])})
    return json.dumps(cList)

@app.route('/api/state/pc_counts')
def get_constituency_count_for_states():
    """
    :rtype : JSON object with array of {state_id:"value",state_name:"value",pc_count="value"}
    """
    db = get_db()
    cursor = db.cursor()
    cursor.execute('select count(c.id),s.name,s.id from constituency c inner join state s on s.id = c.state_id group by s.id order by count(c.id);');
    rsults = []
    for row in cursor.fetchall():
        rsults.append({"state_id":row[2],"state_name":row[1],"pc_count":row[0]})
    return json.dumps(rsults);


@app.route('/api/constituency/<constituency_id>')
def api_constituency(constituency_id):
    output = get_data('get_constituency_list', constituency_id)
    return output;


def get_constituency(constituency_id):
    db = get_db()
    cursor = db.cursor()
    cursor.execute('Select c.id, c.name, c.constituency_code, c.state_id, s.name from constituency c inner join state s on s.id = c.state_id where c.id = ' + constituency_id + ';')
    row = cursor.fetchone()
    constituency = {"id": row[0], "name": cgi.escape(row[1]), "constituency_code": cgi.escape(row[2]), "state_id": row[3], "state_name": cgi.escape(row[4])}
    return json.dumps(constituency)

@app.route('/api/candidate')
def api_candidate_list():
    output = get_data('get_candidate_list', "ALL")
    return output;

def get_candidate_list(param):
    db = get_db()
    cursor = db.cursor()
    cursor.execute('SELECT ca.id, ca.fullname, co.id, co.name, p.id, p.name from candidate ca, candidate_constituency c_c, constituency co, party p where ca.id=c_c.candidate_id and c_c.constituency_id=co.id and c_c.party_id=p.id ')
    output=[]
    for row in cursor.fetchall():
        temp={}
        temp['candidate_id']=row[0]
        temp['candidate_name']=cgi.escape(row[1])
        temp['constituency_id']=row[2]
        temp['constituency_name']=cgi.escape(row[3])
        temp['party_id']=row[4]
        temp['party_name']=cgi.escape(row[5])
        output.append(temp)
    
    return json.dumps(output);

@app.route('/api/candidate/<candidate_id>')
def api_candidate(candidate_id):
    output = get_data('get_candidate_info', candidate_id)
    return output;


def get_candidate_info(candidate_id):
    db = get_db()
    cursor = db.cursor()
    cursor.execute('select id, fullname, age from candidate where id=' + candidate_id + ';')
    row = cursor.fetchone()
    candidate = {"id": row[0], "name": cgi.escape(row[1]), "age": row[2]}
    return json.dumps(candidate)

@app.route('/api/candidate/result/<candidate_id>')
def api_candidate_result(candidate_id):
    output = get_data('get_candidate_result', candidate_id)
    return output;


def get_candidate_result(candidate_id):
    db = get_db()
    cursor = db.cursor()
        
    """ Curate the results """
    vote_counts={}
    result_status={}
    leader = {}
    candidate_name=""
    leader_count= {}
    constituency_ids={}
    cursor.execute('select r.constituency_id,co.name constituency_name,c.fullname candidate_name, r.candidate_id, r.party_id,r.votes, r.time_start, r.status, p.name from results r,candidate c, constituency co, party p where p.id=r.party_id and r.active =1 and c.id=r.candidate_id and  r.constituency_id=co.id and r.constituency_id in (select constituency_id from candidate_constituency where candidate_id ='+ candidate_id +');')
    for row in cursor.fetchall():
        const_name = row[1];
        if not const_name in vote_counts:
            vote_counts[const_name] = {"Others":0}
            result_status[const_name] = 'DECLARED'
            leader[const_name] = [cgi.escape(row[2]),row[3],row[4],row[8]]
            leader_count[const_name] = row[5]
            constituency_ids[const_name]=row[0]
        else:
            if leader_count[const_name] < row[5]:
                leader[const_name] = [cgi.escape(row[2]),row[3],row[4],row[8]]
                leader_count[const_name] = row[5]
            
        temp_count = vote_counts[const_name]
       
        cand_name = cgi.escape(row[2]) if (str(row[3])==str(candidate_id)) else "Others"
        if not cand_name in temp_count:
            temp_count[cand_name]=0
            candidate_name = cand_name
        temp_count[cand_name] = temp_count[cand_name]+row[5]
        vote_counts[const_name] = temp_count
        """ Even if one of the status is 'counting' the status of the constituency is counting"""
        result_status[const_name] = 'DECLARED' if ((result_status[const_name]=='DECLARED') & (cgi.escape(row[7])=='DECLARED')) else 'COUNTING'
    results = []
    for constituency in vote_counts.iterkeys():
        temp = {}
        temp_list = []
        for candid_temp in vote_counts[constituency].iterkeys():
            temp_list.append({'name':candid_temp,'votes':vote_counts[constituency][candid_temp]})
        temp['vote_share_details'] = temp_list
        cand_votes=vote_counts[constituency][candidate_name];
        other_votes=vote_counts[constituency]['Others']
        temp['candidate_vote_share'] = cand_votes*100/(cand_votes+other_votes)
        temp['counting_status'] = result_status[constituency]
        temp['leader_name'] = leader[constituency][0]
        temp['leader_id'] = leader[constituency][1]
        temp['leader_party_id'] = leader[constituency][2]
        temp['leader_party_name']=leader[constituency][3]
        temp['leader_count'] = leader_count[constituency]
        temp['leader_vote_share'] = leader_count[constituency]*100/(cand_votes+other_votes)
        temp['constituency_name']=constituency
        temp['constituency_id']=constituency_ids[constituency]
        results.append(temp)
    return json.dumps(results)

@app.route('/summary')
def summary():
    """Return a friendly HTTP greeting."""
    results = get_data('get_results', '')
    shares = get_data('get_shares', '')

    return render_template('summary.html', results=results, shares=shares)


def get_results(param):
    db = get_db()
    cursor = db.cursor()
    cursor.execute("""SELECT c.shortform , SUM(twotab.seats) seatsc from 
        (SELECT  l.party_id,count(*) seats from `last_time_results` l inner join 
        (select constituency_id, party_id, max(votes) votes from last_time_results 
        group by constituency_id) maxtab on l.constituency_id=maxtab.constituency_id 
        and l.votes=maxtab.votes group by l.party_id) twotab, party p, coalition c 
        where twotab.party_id=p.id and p.coalition_id =c.id group by c.shortform 
        order by seatsc desc""")
    results = []
    for row in cursor.fetchall():
        results.append({"coalition": cgi.escape(row[0]), "result": "Wins", "seats": float(row[1])})

    """Example: results.append({ "coalition":"BJP+", "result":"Wins", "seats":200 })
    results.append({ "coalition":"BJP+", "result":"Leads", "seats":20 })
    """
    return json.dumps(results)


def get_shares(params):
    shares = []
    db = get_db()
    cursor = db.cursor()
    cursor.execute("""SELECT c.name, SUM(l.votes)/100000 FROM `last_time_results` l, 
        party p, coalition c WHERE c.id=p.coalition_id and 
        p.id=l.party_id group by c.id""")

    for row in cursor.fetchall():
        shares.append({"coalition": cgi.escape(row[0]), "share": float(row[1])})
    return shares


@app.errorhandler(404)
def page_not_found(e):
    """Return a custom 404 error."""
    return 'Sorry, Nothing at this URL.', 404


@app.errorhandler(500)
def page_not_found(e):
    """Return a custom 500 error."""
    return 'Sorry, unexpected error: {}'.format(e), 500


#@app.route('/fillRandomResults')
def fill_random_results():
    db = get_db()
    cursor = db.cursor()
    cursor.execute('SELECT * from last_time_results')

    results = []
    importDate = datetime.date(2014, 4, 15)
    for row in cursor.fetchall():
        number = random()
        status = "DECLARED"
        if number > 0.5:
            status = "COUNTING"
        else:
            pass
        results.append({"candidate_id": row[0], "constituency_id": row[1], "votes": row[2], "party_id": row[3],
                        "time_start": str(importDate), "status": status})

    for res in results:
        cursor.execute('''Insert into results (constituency_id,candidate_id,party_id,votes,active,time_start,status) values
                (%s,%s,%s,%s,true,%s,"%s")''', (
            res['constituency_id'], res['candidate_id'], res['party_id'], res['votes'], res['time_start'], res['status']))

    db.commit()
    return json.dumps(results)

def connect_db():
    """Connects to the specific database."""
    if (os.getenv('SERVER_SOFTWARE') and
            os.getenv('SERVER_SOFTWARE').startswith('Google App Engine/')):
        db = MySQLdb.connect(unix_socket='/cloudsql/' + _INSTANCE_NAME, db='resultdayanalysis', user='ls14',
                             passwd='kejriwal')
    else:
        db = MySQLdb.connect(host='127.0.0.1', port=3306, user='root', passwd='root', db='resultdayanalysis')
        # Alternately, connect to a Google Cloud SQL instance using:
        # db = MySQLdb.connect(host='ip-address-of-google-cloud-sql-instance', port=3306, user='root')
    return db


def get_db():
    """Opens a new database connection if there is none yet for the
    current application context.
    """
    if not hasattr(g, 'mysql_db'):
        g.mysql_db = connect_db()
    return g.mysql_db


@app.teardown_appcontext
def close_db(error):
    """Closes the database again at the end of the request."""
    if hasattr(g, 'mysql_db'):
        g.mysql_db.close()




#if __name__ == '__main__':
#	app.run(debug=True)
